"""
Path planning Sample Code with Randomized Rapidly-Exploring Random Trees (RRT)
author: AtsushiSakai(@Atsushi_twi)
"""

import math
import random
import sys
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import savgol_filter
from numpy import linalg
show_animation = True

class RRT:
    """
    Class for RRT planning
    """

    class Node:
        """
        RRT Node
        """

        def __init__(self, x, y, z):
            self.x = x
            self.y = y
            self.z = z
            self.path_x = []
            self.path_y = []
            self.path_z = []
            self.parent = None

    def __init__(self,
                 start,
                 goal,
                 rand_area,
                 expand_dis=5,
                 path_resolution=1,
                 goal_sample_rate=5,
                 max_iter=500):
        """
        def __init__(self,
                     start,
                     goal,
                     obstacle_list,
                     rand_area,
                     expand_dis=5,
                     path_resolution=5,
                     goal_sample_rate=50,
                     max_iter=500):

        Setting Parameter
        start:Start Position [x,y]
        goal:Goal Position [x,y]
        obstacleList:obstacle Positions [[x,y,size],...]
        randArea:Random Sampling Area [min,max]
        """
        self.start = self.Node(start[0], start[1], start[2])
        self.end = self.Node(goal[0], goal[1], goal[2])
        self.min_rand = rand_area[0] #I think that these should not change
        # The reason it that,the same parameters can be used in z-direction
        self.max_rand = rand_area[1]
        self.expand_dis = expand_dis
        self.path_resolution = path_resolution
        self.goal_sample_rate = goal_sample_rate
        self.max_iter = max_iter
        #self.obstacle_list = obstacle_list
        self.node_list = []
        self.test = []

    def planning(self, animation=True):
        """
        rrt path planning
        animation: flag for animation on or off
        """

        self.node_list = [self.start]
        self.test = []

        self.time = np.zeros(1)
        #self.radius = []
        for i in range(self.max_iter):
            self.time += 0.1
            #size = np.abs(5*np.cos(2*np.pi/30*self.time)) + 30
            size = 30
            #self.radius.append(size)
            self.obstacle_list = [(40, 40, 30, size)]
            obstacleList = self.obstacle_list
            x, y, z, size = obstacleList[0][0], obstacleList[0][1], obstacleList[0][2], obstacleList[0][3]
            xl, yl, _ = self.plot_fishfarm(x, y, z, size)
            rnd_node = self.get_random_node()
            nearest_ind = self.get_nearest_node_index(self.node_list, rnd_node)
            nearest_node = self.node_list[nearest_ind]


            new_node = self.steer(nearest_node, rnd_node, self.expand_dis)

            if self.check_collision(new_node, self.obstacle_list, xl, yl):
                self.node_list.append(new_node)
                #return self.radius

            if animation and i % 5 == 0:
                self.draw_graph(rnd_node)
            #print(self.node_list[-1].y)

            if self.calc_dist_to_goal(self.node_list[-1].x,
                                      self.node_list[-1].y,
                                      self.node_list[-1].z) <= self.expand_dis:
                final_node = self.steer(self.node_list[-1], self.end,
                                        self.expand_dis)
                if self.check_collision(final_node, self.obstacle_list, xl, yl): # If the final node is not in the obstacle
                    # Run the final course function
                    return self.generate_final_course(len(self.node_list) - 1)

            if animation and i % 5:
                self.draw_graph(rnd_node)
            #print(i)
            #print(size, '\t', self.time)
            #self.test.append(i)

        return None  # cannot find path


    def steer(self, from_node, to_node, extend_length=float("inf")):
        obstacleList = self.obstacle_list

        x, y, z, size = obstacleList[0][0], obstacleList[0][1], obstacleList[0][2], obstacleList[0][3]
        new_node = self.Node(from_node.x, from_node.y, from_node.z)
        d, theta, alpha, od, beta = self.calc_distance_and_angle(new_node, to_node, obstacleList)


        xl, yl, _ = self.plot_fishfarm(x, y, z, size)


        new_node.path_x = [new_node.x]
        new_node.path_y = [new_node.y]
        new_node.path_z = [new_node.z]
        outer_app = []
        app_angle = []
        p= []
        v2 = []
        for i in range(np.size(xl[0])):
            p.append(i)
            #radius_outer = math.hypot(xl[0][i], yl[0][i])
            outer = [xl[0][i], yl[0][i]]
            outer_app.append(outer)
            test_node = [new_node.x, new_node.y]

            unit1 = test_node / np.linalg.norm(test_node)
            unit2 = outer_app / np.linalg.norm(outer_app)
            dot_prod = np.dot(unit1, unit2[:][i])

            angle = np.arccos(dot_prod)
            angle_deg = 180*angle/np.pi
            app_angle.append(angle_deg)

            t = [x, y]

            #v = [u[0] - t[0], u[1] - t[1]]
            #c_test = xl[0][i+1] - xl[0][i]
            #v2.append(v)
            #print(u)
            c = [np.diff(xl[0]), np.diff(yl[0])]
            #b = np.dot(c[i], v2[i])
            #print(b)

        c = [np.diff(xl[0]), np.diff(yl[0])]





        if extend_length > d:
            extend_length = d

        n_expand = math.floor(extend_length / self.path_resolution)

        print(n_expand)
        for i in range(n_expand):
            new_node.x += self.path_resolution * math.cos(theta)
            new_node.y += self.path_resolution * math.sin(theta)
            new_node.z += self.path_resolution * math.sin(alpha)
            node_d = math.hypot(new_node.x, new_node.y)
            radius_c = math.hypot(x, y)
            radius_node = radius_c - node_d
            node_angle = math.atan2(new_node.y, new_node.x)
            u = [new_node.x - x, new_node.y - y]
            #b = u[0] + c[i]
            #print(u, c[0][0:i])
            b = u + c[0][0:2]
            #print(b)

            if (new_node.x <= np.max(xl[0])) & (new_node.x >= np.min(xl[0])) & (new_node.y <= np.max(yl[0])) & (new_node.y >= np.min(xl[0])):
                new_node.x = new_node.x + new_node.x*math.cos(np.min(app_angle))
                new_node.y = new_node.y + new_node.y*math.sin(np.min(app_angle))

            if (new_node.x <= np.max(5+xl[0])) & (new_node.x >= np.min(np.abs(5-xl[0]))) & (new_node.y <= np.max(5+yl[0])) & (
                    new_node.y >= np.min(np.abs(5-xl[0]))):
                new_node.x = new_node.x + new_node.x*math.cos(np.min(app_angle))
                new_node.y = new_node.y + new_node.y*math.sin(np.min(app_angle))

            if new_node.z <= 0:
                new_node.z = 0

            new_node.path_x.append(new_node.x)
            new_node.path_y.append(new_node.y)
            new_node.path_z.append(new_node.z)

        d, _, _, _, _ = self.calc_distance_and_angle(new_node, to_node, obstacleList)
        if d >= 5:
            d = 5

        if d <= self.path_resolution:
            new_node.path_x.append(to_node.x)
            new_node.path_y.append(to_node.y)
            new_node.path_z.append(to_node.z)
            new_node.x = to_node.x
            new_node.y = to_node.y
            new_node.z = to_node.z

        new_node.parent = from_node

        return new_node

    def generate_final_course(self, goal_ind):
        path = [[self.end.x, self.end.y, self.end.z]]
        node = self.node_list[goal_ind]
        pathx, pathy, pathz = [], [], []
        while node.parent is not None:
            path.append([node.x, node.y, node.z])
            node = node.parent
            pathx.append(node.x)
            pathy.append(node.y)
            pathz.append(node.z)
        path.append([node.x, node.y, node.z])

        return path

    def calc_dist_to_goal(self, x, y, z):
        dx = x - self.end.x
        dy = y - self.end.y
        dz = z - self.end.z
        s = math.hypot(dx, dy)
        r = math.hypot(s, dz)
        return r

    def get_random_node(self):
        if random.randint(0, 100) > self.goal_sample_rate:
            rnd = self.Node(
                random.uniform(self.min_rand, self.max_rand),
                random.uniform(self.min_rand, self.max_rand),
                random.uniform(self.min_rand, self.max_rand))
        else:  # goal point sampling
            rnd = self.Node(self.end.x, self.end.y, self.end.z)

        return rnd

    def draw_graph(self, rnd=None):
        plt.clf()
        # for stopping simulation with the esc key.
        plt.gcf().canvas.mpl_connect(
            'key_release_event',
            lambda event: [exit(0) if event.key == 'escape' else None])
        if rnd is not None:
            plt.gca(projection='3d').plot(rnd.x, rnd.y, rnd.z, "^k")
        for node in self.node_list:
            if node.parent:
                plt.gca(projection='3d').plot(node.path_x, node.path_y, node.path_z, "-g")

        for (ox, oy, oz, size) in self.obstacle_list:
            self.plot_fishfarm(ox, oy, oz, size)

            #print(self.obstacle_list)
        plt.gca(projection='3d').plot(self.start.x, self.start.y, self.start.z, "xr")
        plt.gca(projection='3d').plot(self.end.x, self.end.y, self.end.z, "xr")
        plt.gca(projection='3d').plot(0, 0, 0, "xc")
        #plt.axis("auto")
        plt.axis([-20, 90, -20, 90])
        plt.grid(True)
        plt.pause(0.01)


    @staticmethod
    def plot_fishfarm(x, y, z, size):

        zl = np.linspace(0, z, 100)
        theta = np.linspace(0, 2 * np.pi, 100)
        theta_grid, z_grid = np.meshgrid(theta, zl)
        xl = size * np.cos(theta_grid) + x
        yl = size * np.sin(theta_grid) + y
        #print(np.min(xl), np.min(yl))
        plot_test = plt.gca(projection='3d').plot_wireframe(xl, yl, z_grid)


        return xl, yl, plot_test

    @staticmethod
    # I think that these are the metrics
    def get_nearest_node_index(node_list, rnd_node):
        dlist = [(node.x - rnd_node.x)**2 + (node.y - rnd_node.y)**2 + (node.z - rnd_node.z)**2
                 for node in node_list]
        minind = dlist.index(min(dlist))

        return minind

    @staticmethod
    def check_collision(node, obstacleList, xl, yl):
        #print(xl[0])
        if node is None:
            return False

        for (ox, oy, oz, size) in obstacleList:
            dx_test = [xl[0] - xt for xt in node.path_x]
            dy_test = [yl[0] - yt for yt in node.path_y]
            d_tot = [dx_tot * dx_tot + dy_tot*dy_tot for (dx_tot, dy_tot) in zip(dx_test, dy_test)]
            #print(np.shape(d_tot))

            dx_list = [ox - x for x in node.path_x]
            dy_list = [oy - y for y in node.path_y]
            dz_list = [oz - z for z in node.path_z]
            d_list = [dx * dx + dy * dy + dz * dz for (dx, dy, dz) in zip(dx_list, dy_list, dz_list)]
            #print(np.size(d_list[0]))
            #print(dx_list)
            #print(ox, '\t', node.path_x)
            # d_list is the distance to the nearest obstacle
            test_x = [math.sqrt(math.pow(dx_test, 2) + math.pow(dy_test, 2)) for (dx_test, dy_test) in
                      zip(dx_list, dy_list)]
            #print('Working!!', '\t', dx_list[1], '\t', dy_list[1], '\t', 30 - dz_list[0], '\t', d_list)
            if min(d_list) <= size**2:
                #print('collision', '\t', dx_list[1], '\t', dy_list[1], '\t', 30 - dz_list[0], '\t', np.shape(d_list[1]))
                #main()
                return False  # collision
            #if min(d_tot) <= size**2:
             #   return False
            test_x = [math.sqrt(math.pow(dx_test,2) + math.pow(dy_test,2)) for (dx_test, dy_test) in zip(dx_list, dy_list)]
            #print(test_x[0], '\t',  dx_list[0], '\t', dy_list[0])
        return True  # safe

    @staticmethod
    def calc_distance_and_angle(from_node, to_node, obstacleList):
        ox, oy, oz = obstacleList[0][0], obstacleList[0][1], obstacleList[0][2]
        dox = to_node.x - ox
        doy = to_node.y - oy
        doz = to_node.z - oz
        #print(dox, '\t', doy, '\t', doz, '\t')
        dx = to_node.x - from_node.x
        dy = to_node.y - from_node.y
        dz = to_node.z - from_node.z
        od = math.hypot(dox, doy)
        #od = math.hypot(od, doz)
        #print(od)
        d = math.hypot(dx, dy)
        d = math.hypot(d, dz)
        theta = math.atan2(dy, dx)
        alpha = math.atan2(dz, d)
        beta = math.atan2(doy, dox)
        return d, theta, alpha, od, beta


def main():

    n = 2
    gx, gy, gz = [], [], []
    sx, sy, sz = [], [], []
    """
    for i in range(n):
        gx1, gy1, gz1 = [6.0, 10.0], [10.0, 12.0], [0.0, 5.0]
        gx.append(gx1[i]), gy.append(gy1[i]), gz.append(gz1[i])
        sx1, sy1, sz1 = [0.0, gx[0]], [0.0, gy[0]], [0.0, gz[0]]
        sx.append(sx1[i]), sy.append(sy1[i]), sz.append(sz1[i])
    
    gx, gy, gz = gx[0], gy[0], gz[0]
    sx, sy, sz = sx[0], sy[0], sz[0]
    """
    print("start " + __file__)

    # ====Search Path with RRT====
    #obstacleList = [(30, 30, 30, 30)]  # [x, y, z, radius]
    # Set Initial parameters
    #size = np.abs(30 * np.cos(2 * np.pi / 10 * time)) + 0
    rrt = []
    path = []
    for i in range(n):
        gx1, gy1, gz1 = [5.0, 70.0], [5.0, 70.0], [0.0, 0.0]
        gx.append(gx1[i]), gy.append(gy1[i]), gz.append(gz1[i])
        sx1, sy1, sz1 = [-10.0, gx[0]], [-10.0, gy[0]], [0.0, gz[0]]
        sx.append(sx1[i]), sy.append(sy1[i]), sz.append(sz1[i])
        """
        rrt1 = RRT(
            start=[sx[i], sy[i], sz[i]],
            goal=[gx[i], gy[i], gz[i]],
            rand_area=[-20, 120],
            obstacle_list=obstacleList)
        """
        rrt1 = RRT(
            start=[sx[i], sy[i], sz[i]],
            goal=[gx[i], gy[i], gz[i]],
            rand_area=[-50, 120])
        rrt.append(rrt1)
        path1 = rrt[i].planning(animation=show_animation)
        path.append(path1)
        if path1 is None:
            print("Cannot find path")
        else:
            print("found path!!")

            # Draw final path
            if show_animation:
                rrt1.draw_graph()
                plt.gca(projection='3d').plot([x for (x, y, z) in path[i]], [y for (x, y, z) in path[i]], [z for (x, y, z) in path[i]], '-r')
                plt.grid(True)
                plt.gca(projection='3d').set_xlabel('Length [m]')
                plt.gca(projection='3d').set_ylabel('Width [m]')
                plt.gca(projection='3d').set_zlabel('Depth [m]')
                plt.pause(0.01)  # Need for Mac
                plt.show()


time = np.zeros(1)
if __name__ == '__main__':
    while True:
        time += 0.1
        main()
