import numpy as np
import matplotlib.pyplot as plt
import math
import heapq as hq # just priority queue

# This file is an attempt for hybrid A* from what I concluded that needs to be done to it in 3D

# What was concluded by me is that the use of xv, yv and zv alongside node indexes needs to be changed.
# From what I understand is that the chosen nodes needs to be responsive rather than deterministic. Which means that
# the nodes needs to be created as the search progresess, similar to RRT, but controlled.
# A defined grid needs thus be only limited to domain max and min values.

# To simplify this change, it would be more systematic to create hybrid A* without obstacles, then plan out how
# can obstacle be integrated



def heuristic(position, target, waypoint_radius):
    h = np.sqrt((((((position[0] - target[0]) ** 2) + ((position[1] - target[1]) ** 2) + ((position[2] - target[2]) ** 2)) - waypoint_radius[0]) +
         ((math.radians(position[3]) - math.radians(target[3])) ** 2) +
         (math.radians(position[4]) - math.radians(target[4])) ** 2))
    return float(h)

def waypoint_heuristic(position, waypoints, waypoint_radius):

    h = np.sqrt(((((position[0] - waypoints[0])**2) + ((position[1] - waypoints[1])**2) + ((position[2] - waypoints[2])**2)) - 2*waypoint_radius[0] - waypoint_radius[1]) +
                ((math.radians(position[3]) - math.radians(waypoints[3]))**2) + ((math.radians(position[4]) - math.radians(waypoints[4]))**2)
                )


    return float(h)
def heuristic1(position, target):
    h = np.sqrt((((((position[0] - target[0]) ** 2) + ((position[1] - target[1]) ** 2) + (
                (position[2] - target[2]) ** 2))) +
                 ((math.radians(position[3]) - math.radians(target[3])) ** 2) +
                 (math.radians(position[4]) - math.radians(target[4])) ** 2))
    return float(h)

def heuristic2(position, target):
    h = np.sqrt((((((position[0] - target[0]) ** 2) + ((position[1] - target[1]) ** 2) + (
                (position[2] - target[2]) ** 2))) +
                 ((math.radians(position[3]) - math.radians(target[3])) ** 2) +
                 (math.radians(position[4]) - math.radians(target[4])) ** 2))
    return float(h)



def hybrid_A_star_search(start, goal, obstacle, net_radius, domain, fwd_vel,ox, oy, oz):

    forward_velocity = fwd_vel
    bx, by, bz = domain[0], domain[1], domain[2]
    steering_inputs_xy = [-45, -35, -20, 0, 20, 35, 45]
    cost_steering_xy = [0.5, 0.25, 0.2, 0, 0.2, 0.25, 0.5]
    steering_inputs_z = [-10, 0, 10]
    cost_steering_z = [0.5, 0, 0.5]
    vehicle_length = 1
    waypoint_radius = (0.2, 0.5, 0.5)

    speed_inputs = [-5, forward_velocity]
    cost_speed = [1, 0]
    waypoint = 0

    start = ((float(start[0][0]), float(start[0][1]), float(start[0][2]), float(start[0][3]), float(start[0][4])), (float(start[1][0]), float(start[1][1]), float(start[1][2]), float(start[1][3]), float(start[1][4])))

    end = ((float(goal[0][0]), float(goal[0][1]), float(goal[0][2]), float(goal[0][3]), float(goal[0][4])), (float(goal[1][0]), float(goal[1][1]), float(goal[1][2]), float(goal[1][3]), float(goal[1][4])))

    open_heap, open_diction, visited_diction = [], {}, {}
    obstacles = set(obstacle)
    g_start = 0

    #f1 = g_start + heuristic1(start[0], end[0])
    f2 = g_start + heuristic2(start[1], end[1])
    f = g_start + heuristic1(start[0], end[0]) + heuristic2(start[0], end[1])

    hq.heappush(open_heap, (f, start[0], f2))
    open_diction[start[0]] = (f, start[0], (start[0], start[0]), f2)



    count = 0


    while len(open_heap) > 0:

        count += 1
        chosen_d_node = open_heap[0][1]
        f_tot = open_heap[0][0]
        #print(open_heap[0])
        #f1, f2 = open_heap[0][2], open_heap[0][3]
        f_tot2 = open_heap[0][2]
        chosen_c_node = open_diction[chosen_d_node][1]

        visited_diction[chosen_d_node] = open_diction[chosen_d_node]

        hq.heappop(open_heap)

        final_path = []


        if waypoint == 0:
            if (heuristic1(chosen_d_node, end[0]) < 1) and (heuristic2(chosen_d_node, end[1]) == heuristic1(start[1], end[1])):
                waypoint = 1
                hq.heappush(open_heap, (f2, start[1], f2))
                open_diction[start[1]] = (f2, start[1], (start[1], start[1]), f2)
                reverse_final_path = [end[0]]

                node = chosen_d_node
                m = 1

                count = 0
                while m == 1:
                    count += 1
                    open_node = visited_diction[node]


                    parent_node = open_node[2][1]

                    reverse_final_path.append(parent_node)
                    node = open_node[2][0]


                    if node == start[0]:

                        reverse_final_path.append(start[0])

                        break

                for p in reverse_final_path:
                    final_path.append(p)

                #return final_path

            for i in range(np.size(steering_inputs_xy)):
                for j in range(np.size(steering_inputs_z)):
                    for k in range(np.size(speed_inputs)):

                        delta, beta, velocity = steering_inputs_xy[i], steering_inputs_z[j], speed_inputs[k]
                        g = f_tot - heuristic1(chosen_d_node, end[0]) - heuristic2(chosen_d_node, end[1])

                        u, v = velocity * math.cos(math.radians(chosen_c_node[3])), velocity * math.sin(math.radians(chosen_c_node[3]))
                        w = velocity* np.sqrt(u**2 + v**2) * math.tan(math.radians(chosen_c_node[4]))

                        x_neighbor = chosen_c_node[0] + u
                        y_neighbor = chosen_c_node[1] + v
                        z_neighbor = chosen_c_node[2] + w



                        theta_neighbor = math.radians(chosen_c_node[3]) + math.atan(2*float(vehicle_length)/(np.sqrt(2)*velocity)*math.sin(math.radians(delta)/2))

                        alpha_neighbor = math.radians(chosen_c_node[4]) + math.atan(2 * float(vehicle_length) / (np.sqrt(2) * velocity) * math.sin(math.radians(beta)/2))

                        theta_neighbor, alpha_neighbor = math.degrees(theta_neighbor), math.degrees(alpha_neighbor)
                        min_x, min_y, min_z = min(bx), min(by), min(bz)
                        max_x, max_y, max_z = max(bx), max(by), max(bz)
                        x_neighbor_d, y_neighbor_d, z_neighbor_d, theta_neighbor_d, alpha_neighbor_d = round(x_neighbor), round(y_neighbor), round(z_neighbor), round(theta_neighbor), round(alpha_neighbor)
                        neighbor = ((x_neighbor_d, y_neighbor_d, z_neighbor_d, theta_neighbor_d, alpha_neighbor_d), (x_neighbor, y_neighbor, z_neighbor, theta_neighbor, alpha_neighbor))
                        neighbor_xyz = (x_neighbor_d, y_neighbor_d, z_neighbor_d)

                        radius_neighbor = np.sqrt(x_neighbor**2 + y_neighbor**2)


                        if ((radius_neighbor > 1.1*net_radius) and ( \
                                       x_neighbor_d >= min_x) and (x_neighbor_d <= max_x) and \
                               (y_neighbor_d >= min_y) and (y_neighbor_d <= max_y) and \
                               (z_neighbor_d >= min_z) and (z_neighbor_d <= max_z)):


                            h = heuristic1((x_neighbor_d,y_neighbor_d,z_neighbor_d,theta_neighbor_d,alpha_neighbor_d), end[0]) + heuristic2((x_neighbor_d,y_neighbor_d,z_neighbor_d,theta_neighbor_d,alpha_neighbor_d), end[1])
                            g = abs(velocity) + g + cost_steering_xy[i] + cost_steering_z[j] + cost_speed[k]


                            f = h + g

                            skip = 0
                            # print(open_set_sorted)
                            # If the cost of going to this successor happens to be more
                            # than an already existing path in the open list to this successor,
                            # skip this successor
                            found_lower_cost_path_in_open = 0

                            if neighbor[0] in open_diction:

                                if f > open_diction[neighbor[0]][0]:  # removed the nodes that are too big in cost
                                    skip = 1

                                elif neighbor[0] in visited_diction:

                                    if f > visited_diction[neighbor[0]][0]:  # If new node is more costly than old ones
                                        found_lower_cost_path_in_open = 1

                            if skip == 0 and found_lower_cost_path_in_open == 0:
                                #hq.heappush(open_heap, (f, neighbor[0], steering_inputs_xy, steering_inputs_z))
                                hq.heappush(open_heap, (f, neighbor[0], f2))


                                open_diction[neighbor[0]] = (f, neighbor[1], (chosen_d_node, chosen_c_node), f2)


        if waypoint == 1:

            for i in range(np.size(steering_inputs_xy)):
                for j in range(np.size(steering_inputs_z)):
                    for k in range(np.size(speed_inputs)):
                        delta, beta, velocity = steering_inputs_xy[i], steering_inputs_z[j], speed_inputs[k]


                        g = f_tot2 - heuristic2(chosen_d_node, end[1])

                        u, v = velocity * math.cos(math.radians(chosen_c_node[3])), velocity * math.sin(
                            math.radians(chosen_c_node[3]))
                        w = velocity * np.sqrt(u ** 2 + v ** 2) * math.tan(math.radians(chosen_c_node[4]))

                        x_neighbor = chosen_c_node[0] + u
                        y_neighbor = chosen_c_node[1] + v
                        z_neighbor = chosen_c_node[2] + w


                        theta_neighbor = math.radians(chosen_c_node[3]) + math.atan(
                            2 * float(vehicle_length) / (np.sqrt(2) * velocity) * math.sin(math.radians(delta) / 2))

                        alpha_neighbor = math.radians(chosen_c_node[4]) + math.atan(
                            2 * float(vehicle_length) / (np.sqrt(2) * velocity) * math.sin(math.radians(beta) / 2))

                        theta_neighbor, alpha_neighbor = math.degrees(theta_neighbor), math.degrees(alpha_neighbor)
                        min_x, min_y, min_z = min(bx), min(by), min(bz)
                        max_x, max_y, max_z = max(bx), max(by), max(bz)
                        x_neighbor_d, y_neighbor_d, z_neighbor_d, theta_neighbor_d, alpha_neighbor_d = round(
                            x_neighbor), round(y_neighbor), round(z_neighbor), round(theta_neighbor), round(
                            alpha_neighbor)
                        neighbor = ((x_neighbor_d, y_neighbor_d, z_neighbor_d, theta_neighbor_d, alpha_neighbor_d),
                                    (x_neighbor, y_neighbor, z_neighbor, theta_neighbor, alpha_neighbor))


                        radius_neighbor = np.sqrt(x_neighbor ** 2 + y_neighbor ** 2)


                        if ((radius_neighbor > 1.1 * net_radius) and (\
                                        x_neighbor_d >= min_x) and (x_neighbor_d <= max_x) and \
                                (y_neighbor_d >= min_y) and (y_neighbor_d <= max_y) and \
                                (z_neighbor_d >= min_z) and (z_neighbor_d <= max_z)):

                            h = heuristic2(
                                (x_neighbor_d, y_neighbor_d, z_neighbor_d, theta_neighbor_d, alpha_neighbor_d), end[1])
                            g = abs(velocity) + g + cost_steering_xy[i] + cost_steering_z[j] + cost_speed[k]

                            f_waypoint = h + g

                            #print(f_waypoint, h, f)

                            skip = 0

                            found_lower_cost_path_in_open = 0

                            if neighbor[0] in open_diction:

                                if f_waypoint > open_diction[neighbor[0]][3]:  # removed the nodes that are too big in cost
                                    skip = 1

                                elif neighbor[0] in visited_diction:

                                    if f_waypoint > visited_diction[neighbor[0]][3]:  # If new node is more costly than old ones
                                        found_lower_cost_path_in_open = 1

                            if skip == 0 and found_lower_cost_path_in_open == 0:
                                hq.heappush(open_heap, (f_waypoint, neighbor[0], f_waypoint))
                                #print(f_waypoint, h)

                                open_diction[neighbor[0]] = (f_waypoint, neighbor[1], (chosen_d_node, chosen_c_node), f_waypoint)


        if (heuristic2(chosen_d_node, end[1]) < 1):
            print('path path')
            reverse_final_path = [end[1]]


            node = chosen_d_node
            m = 1

            count = 0
            while m == 1:
                count += 1
                open_node = visited_diction[node]


                parent_node = open_node[2][1]

                reverse_final_path.append(parent_node)
                node = open_node[2][0]

                if node == start[1]:

                    reverse_final_path.append(start[1])

                    break
                elif count == 100:

                    reverse_final_path.append(start[1])

                    break

            for p in reverse_final_path:
                final_path.append(p)

            return final_path


    print("Did not find the goal - it's unattainab.")
    return []


def main():


    goal = ((5.0, -6.0, -2.0, 0.0, 0.0), (5.0, 2.0, -1.0, 0.0, 0.0))
    start = ((-5.0, -5.0, -1.0, 0, 0), goal[0])

    fwd_vel = 1
    bx, by, bz = (-8, 8), (-8, 8), (-4, 0)
    domain = bx, by, bz
    dx, dy, dz = bx[1] - bx[0], by[1] - by[0], bz[1] - bz[0]

    currents = np.zeros((dx, dy, dz))
    currents[0], currents[1], currents[2] = 0, 0, 0
    obstacle = []
    net_levels = 10
    angle = np.linspace(0,2*np.pi, net_levels)
    net_depth = -3
    z_n = np.linspace(net_depth,0, net_levels)
    net_radius = 3.0
    for i in range(np.size(angle)):
        for j in range(np.size(angle)):
            x, y = net_radius * np.cos(angle[i]), net_radius * np.sin(angle[i])

            obstacle.append((x,y, z_n[j]))
    # for i in range(10):
    #     for j in range(10):
    #         obstacle.append((0, -i, 0))
    #         obstacle.append((0, i, j))
    #         obstacle.append((0, -i, -j))
    #         obstacle.append((0, i, -j))
    #         obstacle.append((0, -i, j))

    # obstacle.remove((0,5,2))
    # obstacle.remove((0, 5, 3))
    # obstacle.remove((0, -1, -1))
    # obstacle.remove((0, 1, 1))
    ox, oy, oz = [], [], []
    for (x, y, z) in obstacle:
        ox.append(x)
        oy.append(y)
        oz.append(z)




    path = hybrid_A_star_search(start, goal, obstacle, net_radius, domain, fwd_vel,ox, oy, oz)
    print(path)
    rx, ry, rz, rtheta, ralpha = [], [], [], [], []
    for node in path:
        rx.append(node[0])
        ry.append(node[1])
        rz.append(node[2])
        rtheta.append(node[3])
        ralpha.append(node[4])
    plt.pause(0.01)
    plt.figure(1)
    plt.gca(projection='3d').plot(rx, ry, rz, "-r")
    plt.gca(projection='3d').plot(ox, oy, oz, ".k")
    plt.gca(projection='3d').scatter(start[0][0], start[0][1], start[0][2])
    plt.gca(projection='3d').scatter(goal[0][0], goal[0][1], goal[0][2])
    plt.gca(projection='3d').scatter(goal[1][0], goal[1][1], goal[1][2])
    plt.xlabel('x-axis, Width [m]')
    plt.ylabel('y-axis, Length [m]')
    plt.gca(projection='3d').set_zlabel('z-axis, Depth [m]')
    plt.xlim([min(bx), max(bx)])
    plt.ylim([min(by), max(by)])
    plt.grid(True)

    plt.figure(2)
    plt.plot(rtheta)
    plt.plot(ralpha)
    plt.xlabel('Time / Amount of nodes')
    plt.ylabel('Steering Angle in deg')
    plt.legend(['Theta', 'Alpha'])
    plt.grid(True)


if __name__ == '__main__':
    print(__file__ + " start!!")
    main()
plt.show()
